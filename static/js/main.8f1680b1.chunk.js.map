{"version":3,"sources":["assets/images/ctd-logo.png","assets/images/ctd-labs-logo.png","logo.svg","constants/routes.js","components/Navigation/index.js","components/Footer/index.js","containers/Dashboard/index.js","containers/About/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HOME","ABOUT","Navigation","react_default","a","createElement","className","src","Logo","react_router_dom","to","ROUTES","Footer","Date","getFullYear","Dashboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","labsLogo","target","href","React","Component","About","App","basename","process","components_Navigation","react_router","exact","path","component","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0ICA3BC,EAAO,IACPC,EAAS,0BCuBPC,EAlBI,kBACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,OAEZL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAIC,GAAV,SAEFR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAIC,GAAV,cCRGC,EANA,kBACXT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,kBAA4C,IAAIO,MAAOC,cAAvD,8EC8BOC,cA/Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAS,GAHMR,qHAajB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,oMACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKmB,OAEZvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGsB,OAAO,SAASC,KAAK,mCAAxB,4BAvBYC,IAAMC,WCafC,EAbD,kBACV5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,ulBAGAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGsB,OAAO,SAASC,KAAK,wCAAxB,WACLzB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGsB,OAAO,SAASC,KAAK,iCAAxB,kBCcFI,MAff,WACE,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQwB,SAAUC,YAChB/B,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM3B,EAAa4B,UAAWxB,IAC3CZ,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM3B,EAAc4B,UAAWR,KAE9C5B,EAAAC,EAAAC,cAACmC,EAAD,SCPUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8f1680b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ctd-logo.a3287f5d.png\";","module.exports = __webpack_public_path__ + \"static/media/ctd-labs-logo.bdbeefd6.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const HOME = '/';\nexport const ABOUT  = '/about';\n","import React from 'react'\nimport { Link } from \"react-router-dom\";\nimport * as ROUTES from \"../../constants/routes.js\";\nimport Logo from '../../assets/images/ctd-logo.png'\n\n\nconst Navigation = () => (\n    <nav className=\"navigation\">\n      <div className=\"nav-content\">\n        <div className=\"logo-wrapper\">\n          <img src={Logo} />\n        </div>\n        <ul>\n          <li>\n            <Link to={ROUTES.HOME}>Home</Link>\n          </li>\n          <li>\n            <Link to={ROUTES.ABOUT}>About</Link>\n          </li>\n        </ul>\n      </div>\n  </nav>\n)\n\nexport default Navigation","import React from 'react';\n\n\nconst Footer = () => (\n    <div className=\"footer\">\n        <div className=\"footer-content\">Copyright Â©{new Date().getFullYear()} Code the Dream</div>\n    </div>\n)\n\nexport default Footer","import React from \"react\";\nimport labsLogo from '../../assets/images/ctd-labs-logo.png'\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n    };\n  }\n  componentDidMount() {\n    \n  }\n\n\n  render() {\n\n    return (\n      <div className=\"view-container dashboard\">\n        <div className=\"dashboard-content\">\n          <p>Welcome to the Code the Dream starter kit. This barebones react boilerplate based off of create react app has react router 5 and SCSS installed. The rest is whatever you can dream up!</p>\n          <div className=\"logo-wrapper\">\n            <p>made with love by</p>\n            <img src={labsLogo} />\n          </div>\n          <div className=\"cta-wrapper\">\n            <a target=\"_blank\" href=\"https://github.com/CodeTheDream\">View on Github</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Dashboard","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst About = () => (\n    <div className=\"view-container about \">\n        <h3>About Code the Dream</h3>\n        <p>\n        Code the Dream offers free intensive training in software development to people from diverse low-income backgrounds. In CTD Labs, our coders work with experienced mentors to hone those skills by building apps and technology platforms for a range of startups, nonprofits and government clients. The ultimate aim of Code the Dream is to create a unique win-win, where our coders gain real experience building apps that make the world a little better place, and then use that experience to launch new careers with enormous opportunity for themselves, their families, and their communities.\n        </p>\n        <div className=\"cta-wrapper\">\n            <div><a target=\"_blank\" href=\"https://www.codethedream.org/donate/\">Donate</a></div>\n            <div><a target=\"_blank\" href=\"https://www.codethedream.org/\">Learn More</a></div>\n        </div>\n    </div>\n)\n\nexport default About;\n","import React from 'react';\nimport logo from './logo.svg';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Navigation from \"./components/Navigation\";\nimport Footer from \"./components/Footer\";\nimport Dashboard from \"./containers/Dashboard\";\nimport * as ROUTES from \"./constants/routes.js\";\nimport About from \"./containers/About\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <Navigation />\n          <Switch>\n            <Route exact path={ROUTES.HOME} component={Dashboard} />\n            <Route exact path={ROUTES.ABOUT} component={About} />\n          </Switch>\n          <Footer />\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}